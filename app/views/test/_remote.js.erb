describe("remote", function() {
  
  var save_wait = 1000;
  var remote_get = function(model, id, field) {
    return $.ajax({
      url: "/test/get?model_name=" + model + "&id=" + id + "&field_name=" + field, 
      async: false
    }).responseText;
  };
  
  var remote_update = function(model, id, field, value, async) {
    $.ajax({
      url: "/test/update?model_name=" + model + "&id=" + id + "&field_name=" + 
           field + "&value=" + value,
      async: async || true
    })
  };
  
  describe("data", function() {
    var bob;
    var bobs_post;
    
    beforeEach(function() {
      resetData();
      bob = Account.find_local(1);
      bobs_post = Post.find_local(1);
      expect(bobs_post.message()).not.toEqual('foo');
    })

    it("should update server data", function() {
      bobs_post.message('foo');
      expect(remote_get('Post', 1, 'message')).not.toEqual('foo');
      
      runs(function() {
        bobs_post.save();
      });
      waits(save_wait);
      runs(function() {
        expect(remote_get('Post', 1, 'message')).toEqual('foo');
      });
      
    });
    
    it("should invoke committed callback", function() {
      var callback = jasmine.createSpy();

      runs(function() {
        bobs_post.set_committed_handler(callback);
        bobs_post.message('foo');
        expect(callback).not.toHaveBeenCalled();
        bobs_post.save();
      });        
      waits(save_wait);
      runs(function() {
        expect(callback).toHaveBeenCalled();
        expect(callback.callCount).toEqual(1);
        expect(bob.id()).toEqual(1);
      });

    });
    
    it("should assign server-id on new instance", function() {
      var callback = jasmine.createSpy();
      var bobs_new_post = Post.create({message: 'new_post'});
      expect(bob.posts().length).toEqual(1);
      bob.add_post(bobs_new_post);
      bobs_new_post.set_committed_handler(callback);
      
      runs(function() {
        expect(bobs_new_post.account_id()).toEqual(1);
        expect(bobs_new_post.id()).not.toBeDefined();
        expect(bobs_new_post.cid()).toBeDefined();
        expect(bobs_new_post.message()).toEqual('new_post');
        expect(bob.posts().length).toEqual(2);
        expect(callback).not.toHaveBeenCalled();
        bobs_post.save();
      })
      waits(save_wait);
      runs(function() {
        expect(callback).toHaveBeenCalled();
        expect(bob.id()).toEqual(1);
        expect(bobs_new_post.id()).toBeDefined();
        expect(bobs_new_post.cid()).toBeDefined();
        expect(bobs_new_post.message()).toEqual('new_post');
        expect(bob.posts().length).toEqual(2);
        expect(callback).toHaveBeenCalled();
        expect(remote_get('Post', bobs_new_post.id(), 'message')).toEqual('new_post');
      })

    });
    
  });

  describe("polling", function() {
    var bob;
    var bobs_post;
    var connect_wait = 300;
    var propagate_wait = 4000;
    var polling_iframes = [];
  
    var create_polling_iframe = function(id) {
      var ifr = $('body').append('<iframe id="'+id+'" name="'+id+'" src="/test/poller"></iframe>');
      polling_iframes.push(id);
      return $('#'+id)[0].contentWindow;
    }
    var clear_polling_iframe = function(id) {
      $('#'+id).remove();
    };
    var clear_all_polling_iframes = function() {
      polling_iframes.each(function(id) {
        clear_polling_iframe(id);
      })
    }
    
    var start_pollers = function(how_many, ary, wait) {
      runs(function() {
        for(var i=0;i<how_many;i++) {
          ary.push(create_polling_iframe('ifr_'+i));
        }          
      });
      waits(wait || propagate_wait)
    }
  
    beforeEach(function() {
      resetData();
      bob = Account.find_local(1);
      bobs_post = Post.find_local(1);
    })
    
    afterEach(function() {
      ModelUtils.adapter.stop_polling();
      clear_all_polling_iframes();
    })
  
    it("should update async values", function() {
      // Begin Polling
      runs(function() {
        ModelUtils.adapter.start_polling();
      });
      waits(connect_wait);
  
      // Invoke a change from the other end
      runs(function() {
        remote_update('Post', 1, 'message', 'foobar');
      });
  
      // Let the change propagate and exepct
      waits(propagate_wait);
      runs(function() {
        expect(bobs_post.message()).toEqual('foobar');
      })
    });
  
  
    it("should update multiple clients", function() {
      // Begin Polling in our window and others
      ModelUtils.adapter.start_polling();
      var pollers = []; start_pollers(2, pollers);
        
      // Make sure they have pre-dirty data
      runs(function() {
        expect(pollers[0].Post.find_local(1).message()).not.toEqual('foobar');
        expect(pollers[1].Post.find_local(1).message()).not.toEqual('foobar');
      })
  
      // Invoke a change from the other end
      runs(function() {
        remote_update('Post', 1, 'message', 'foobar');
      });
  
      // Make sure everybody sees our change. 
      waits(propagate_wait);
      runs(function() {
        expect(bobs_post.message()).toEqual('foobar');
        expect(pollers[0].Post.find_local(1).message()).toEqual('foobar');
        expect(pollers[1].Post.find_local(1).message()).toEqual('foobar');
      })
      
      // Let everybody startup again and send a new change
      waits(1000);
      runs(function() {
        remote_update('Post', 1, 'message', 'baz');
      });
      
      // Make sure they got the new updates
      waits(propagate_wait);
      runs(function() {
        expect(bobs_post.message()).toEqual('baz');
        expect(pollers[0].Post.find_local(1).message()).toEqual('baz');
        expect(pollers[1].Post.find_local(1).message()).toEqual('baz');
      })
      
      
    });
    
    
    it("should not crash when browsers close", function() {
      // Begin Polling in our window and others
      var pollers = []; start_pollers(10, pollers, 10000);
        
      // Kill one browser
      runs(function() {
        clear_polling_iframe('ifr_9');
      });
  
      // Make sure we can still see database values. (make sure server still running)
      waits(1000);
      runs(function() {
        expect(remote_get('Post', 1, 'message')).toEqual('this is post_1')
      });
      
      // Now, send an update from one of our pollers
      runs(function() {
        pollers[0].Post.find_local(1).message('changed');
        pollers[0].Post.find_local(1).save();
      });
      
      // Wait a bit and make sure everybody got the change. 
      waits(propagate_wait);
      runs(function() {
        for(var i=0;i<9;i++) {
          expect(pollers[i].Post.find_local(1).message()).toEqual('changed')
        }
      });
      
      // Now, kill another poller
      runs(function() {
        clear_polling_iframe('ifr_8');
      });
      
      // Make sure we're still running
      waits(1000);
      runs(function() {
        expect(remote_get('Post', 1, 'message')).toEqual('changed')
      });

    });
    
    // it("should survive a stress test", function() {
    // 
    //       // Begin Polling in our window and others
    //       var number_of_pollers = 30;
    //       var pollers = []; start_pollers(100, pollers, 25000);
    //       
    //       // Now, send an update from one of our pollers
    //       runs(function() {
    //         pollers[0].Post.find_local(1).message('changed');
    //         pollers[0].Post.find_local(1).save();
    //       });
    //       
    //       // Wait a bit and make sure everybody got the change. 
    //       waits(6000);
    //       runs(function() {
    //         for(var i=0;i<number_of_pollers;i++) {
    //           expect(pollers[i].Post.find_local(1).message()).toEqual('changed')
    //         }
    //       });
    // 
    //       // Make sure we're still running
    //       waits(1000);
    //       runs(function() {
    //         expect(remote_get('Post', 1, 'message')).toEqual('changed')
    //       });
    // 
    //     });
  
  
  });
  
  
    
    
  // it("should update associations", function() {
  //   var bob = Account.find_local(1);
  //   var bobs_post = Post.find_local(1);
  //   
  // });

})
